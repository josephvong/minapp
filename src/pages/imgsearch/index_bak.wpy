
<template>
  <view class="img-search-page">
    <view @tap="imgUpload">click</view> 
    <image src="{{cutImage}}" mode="widthFix" style="border:1px solid red"></image>
    <!--组件-->
    <view class="croppa-wrap" style="display:{{isShow?'block':'none'}}"> 
       <canvas canvas-id="CropperCanvas"  class="place"
        style="z-index:200;width:{{canvas_w}}px;height:{{canvas_h}}px;display:{{canvasShow?'block':'none'}}"
      ></canvas>

      <view class="croppa-title">请调整图片</view>
      
      <view class="croppa-body" style="padding-top:{{boxScale?'125%':'100%'}}"  >   
        <image mode="scaleToFill" src="{{uploadImgSrc}}" 
        style="top:{{imageStyle.top}};transform:{{imageStyle.transform}};transform-origin:{{imageStyle.transformOrigin}};width:{{imageState.width}}px; height:{{imageState.height}}px" >   
        </image> 
        <view class="touch-zone"   
          @touchstart.prevent="zoneTouchStart"
          @touchmove.prevent = "zoneTouchMove" 
        ></view>
      </view>
      
      <view class="croppa-footer" @tap="croppaConfirm">
        确定 
      </view>
      
     
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'  
  const getDinstance = function (point0, point1) {
    return Math.sqrt(Math.pow(point0.pageY - point1.pageY, 2) + Math.pow(point0.pageX - point1.pageX, 2))
  }
  const DEVICE = wepy.getSystemInfoSync()
  const DEVICE_W = DEVICE.windowWidth

  export default class imgSearch extends wepy.page {
    config = {
      navigationBarTitleText: '酒标搜索'

    }

    components = {
      //imgCropper
    }

    //mixins = [testMixin]

    data = {
      canvasShow:false,

      cutImage:'',
      //--------组件props---------
      boxScale:false, 
      uploadImgSrc:'',

      //--------组件data----------
      isShow:false,
      imageStyle:{
        top: '0', 
        transform: 'translate3d(0px, 0px, 0px) scale(1)',
        transformOrigin: 'left top'
      },
      imageState: {
        left: 0,
        top: 0,
        scale: 1,
        width: 0,
        height: 0,
        originX: 0,
        originY: 0
      },
      touchPos: {
        x: 0,
        y: 0
      },
      imgInitTop: 0,
      canvas_w:0,
      canvas_h:0,

    }

    computed = {
      croppaBodyRect(){
       
        if(this.boxScale){
          return {w:DEVICE_W, h:DEVICE_W*1.25}
        }else{
          return {w:DEVICE_W, h:DEVICE_W}
        }
      }
    } 

    methods = {
      imgUpload () {
        const This = this

        wepy.chooseImage({
          count: 1, // 默认9
          sizeType: ['original','compressed'], // 可以指定是原图还是压缩图，默认二者都有
          sourceType: ['album', 'camera'], // 可以指定来源是相册还是相机，默认二者都有 
        }).then((res)=>{
           const src = res.tempFilePaths[0]  
           this.uploadImgSrc = src
           this.methods.imgStateInit(src,this)
           this.isShow = true
           this.$apply()
           //console.log(this.imageState)
        })
      },

      async imgStateInit(src,module){
        const info = await wepy.getImageInfo({src:src}) 
        module.imageState.width = info.width
        module.imageState.height = info.height
        module.imageState.scale = 1 
        //console.log({w:info.width,h:info.height})
        module.$apply()
      },

      /*getCropperImage () {
         
      },*/ 
      
      //----------------拖动函数-----------------
      //--------------拖动函数---------------
      getFocalPoint (point0, point1) { // 两手指 同时触摸屏幕时 返回 x y 坐标
        return {
          x: (point0.pageX + point1.pageX) / 2,
          y: (point0.pageY + point1.pageY) / 2
        }
      },

      zoneTouchStart(event){
        //console.log(event)
        let fingerCount = event.touches.length
        if(fingerCount){
          let touchEvent = event.touches[0]
          this.touchPos = {
            x:touchEvent.clientX,
            y:touchEvent.clientY
          }
        }

        if(fingerCount>=2){
          // 获取两点距离、中点位置；两点距离old/new=放大倍数；中点位置，缩放中心；
          let point0 = event.touches[0]
          let point1 = event.touches[1]

          this.distance = getDinstance(point0, point1)
          this.touchPos = this.methods.getFocalPoint(point0, point1) // 取两个触摸点的距离中间点
          // 设置缩放倍数，
         // console.log(this.touchPos)
        }
         
      },

      zoneTouchMove(event){
        let fingerCount = event.touches.length
        let touchEvent = event.touches[0] 
        if(fingerCount===1){
          let distX = (touchEvent.clientX - this.touchPos.x)*0.5 //x轴 距离touchstart 点x 移动的距离
          let distY = (touchEvent.clientY - this.touchPos.y)*0.5 //y轴 距离touchstart 点y 移动的距离
          
          let newX = this.imageState.left - distX  // 图片 方位 数据的刷新
          let newY = this.imageState.top - distY

          let scale = this.imageState.scale

          let maxX = this.imageState.width * scale - this.croppaBodyRect.w  // 计算最大x/y移动距离
          let maxY = this.imageState.height * scale - this.croppaBodyRect.h

          this.imageState.left = newX < 0 ? 0 : (newX > maxX ? maxX : newX)
          this.imageState.top = newY  < 0 ? 0 : (newY > maxY ? maxY : newY)

          this.touchPos.x = touchEvent.pageX  // 动态刷新 拖动点 （touchPos）
          this.touchPos.y = touchEvent.pageY 
 
        }else if(fingerCount > 1){
          let point0 = event.touches[0]
          let point1 = event.touches[1]

          let distance = getDinstance(point0, point1)
          let zoom = distance / this.distance

          let scale = zoom * this.imageState.scale 

          let maxX = this.imageState.width * scale - this.croppaBodyRect.width
          let maxY = this.imageState.height * scale - this.croppaBodyRect.height
          let touchPos = this.methods.getFocalPoint(point0, point1)
          let newX = zoom * (this.imageState.left + touchPos.x) - touchPos.x
          let newY = zoom * ((this.imageState.top - this.imgInitTop) + touchPos.y) - touchPos.y + this.imgInitTop

          this.distance = distance
          if (scale < this.minScale) {
            this.imageState.scale = this.minScale
          } else {
            this.imageState.scale = scale
            this.imageState.left = newX < 0 ? 0 : (newX > maxX ? maxX : newX)
            this.imageState.top = newY < 0 ? 0 : (newY > maxY ? maxY : newY)
          }
          this.touchPos = touchPos 
        } 
      },

      croppaConfirm(){
        let This = this;

        let cutState = {
          startX:-this.imageState.left,
          startY:-this.imageState.top,
          canvasW:this.croppaBodyRect.w,
          canvasH:this.croppaBodyRect.h
        }

        const ctx = wx.createCanvasContext('CropperCanvas')
        this.canvas_w = cutState.canvasW;
        this.canvas_h = cutState.canvasH;
        
        ctx.setFillStyle('yellow')
        ctx.fillRect(0, 0, this.canvas_w, this.canvas_h)
        //ctx.draw()  
        console.log([
          cutState.startX, 
          cutState.startY, 
          This.imageState.width*This.imageState.scale, 
          This.imageState.height*This.imageState.scale 
        ])
        ctx.drawImage(
          this.uploadImgSrc, 
          0,
          0,
          This.imageState.width*This.imageState.scale,  
          This.imageState.height*This.imageState.scale, 
          //-cutState.startX, 
          //-cutState.startY,  
          //cutState.canvasW*This.imageState.scale, 
          //cutState.canvasH*This.imageState.scale
        )
        ctx.draw()
        This.canvasShow = true
        setTimeout(()=>{
          wx.canvasToTempFilePath({
            x: 0,
            y: 0,
            width: cutState.canvasW,
            height: cutState.canvasH,
            //destWidth:cutState.canvasW,
            //destHeight:cutState.canvasH, 
            canvasId: 'CropperCanvas',
            success: function(res) {
              console.log(res.tempFilePath)
              This.canvasShow = true
              This.cutImage = res.tempFilePath
              This.$apply()
            } 
          }) 
        },300) 
       
      }
         

    } 

    watch = {
      imageState(newVal){ 
        this.imageStyle.transform = 'translate3d(-' + newVal.left + 'px, -' + newVal.top  + 'px, 0px) scale(' + newVal.scale + ')'

        this.$apply() 
        //console.log(this.imageStyle.transform)
      }   
    }

    events = {
       
    }

    onLoad() {
      //console.log(this.croppaBodyRect)
    }
  }
</script>

<style lang="stylus">
.img-search-page
  color black
        
.croppa-wrap
  position: fixed;
  top: 5%;
  bottom:0;
  left: 0;
  right:0; 
  z-index: 9999;
  background-color: green;
  overflow: hidden;
  .croppa-title
    width 100%
    height 200rpx
    line-height 200rpx
    text-align center
    font-size 40rpx
    background pink
  .croppa-body
    position relative
    width 100%
    height 60rpx
    background blue
    image
      display block
      position absolute
       
    .touch-zone
      position absolute
      left 0
      top 0
      width 100%
      height 100%
      background rgba(0,0,0,0.8)
  .croppa-footer
    position fixed
    left 0
    bottom 0rpx
    height 160rpx
    line-height 160rpx
    width 100%
    text-align center
    color black
    z-index 11
    background yellow 
  .place
    position fixed
    top 0
    left 0        
</style>
